BASE <http://rdf.rhea-db.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX linkml: <https://w3id.org/linkml/>


<DatabaseIdentifier> IRI

<CHEBIIdentifier> IRI

linkml:String xsd:string

linkml:Integer xsd:integer

linkml:Boolean xsd:boolean

linkml:Float xsd:float

linkml:Double xsd:double

linkml:Decimal xsd:decimal

linkml:Time xsd:dateTime

linkml:Date xsd:date

linkml:Datetime xsd:dateTime

linkml:Uriorcurie IRI

linkml:Uri IRI

linkml:Ncname xsd:string

linkml:Objectidentifier IRI

linkml:Nodeidentifier NONLITERAL

<AbstractReaction>  (
    @<BidirectionalReaction> OR @<DirectionalReaction> OR @<Reaction>
)

<AbstractReaction_struct> {
    (  $<AbstractReaction_tes> (  &<Class_tes> ;
          rdf:type [ rdfs:Class ] ? ;
          <status> @<StatusEnum> ? ;
          <accession> @<DatabaseIdentifier> ? ;
          rdfs:seeAlso @linkml:String * ;
          <isTransport> @linkml:Boolean ? ;
          <isChemicallyBalanced> @linkml:Boolean ? ;
          <citation> @linkml:Integer * ;
          <htmlEquation> @linkml:String ? ;
          <equation> @linkml:String ? ;
          rdfs:subClassOf @<AbstractReaction> ? ;
          <ec> @linkml:String *
       ) ;
       rdf:type [ <AbstractReaction> ]
    )
}

<BidirectionalReaction> CLOSED {
    (  $<BidirectionalReaction_tes> (  &<AbstractReaction_tes> ;
          rdf:type [ <AbstractReaction> ] ? ;
          <substratesOrProducts> @<ReactionSide> * ;
          rdfs:subClassOf @<BidirectionalReaction> ?
       ) ;
       rdf:type [ <BidirectionalReaction> ]
    )
}

<Class>  (
    CLOSED {
       (  $<Class_tes> (  rdfs:comment @linkml:String ? ;
             rdf:type @linkml:Uriorcurie ? ;
             rdfs:label @linkml:String ?
          ) ;
          rdf:type [ rdfs:Class ]
       )
    } OR @<AbstractReaction> OR @<Compound> OR @<ReactionParticipant> OR @<ReactivePart>
)

<Compound>  (
    CLOSED {
       (  $<Compound_tes> (  &<Class_tes> ;
             rdf:type [ rdfs:Class ] ? ;
             <name> @linkml:String ? ;
             <accession> @<DatabaseIdentifier> ? ;
             <htmlName> @linkml:String ? ;
             <formula> @linkml:String ? ;
             rdfs:subClassOf @<Compound> ?
          ) ;
          rdf:type [ <Compound> ]
       )
    } OR @<GenericCompound> OR @<Polymer> OR @<SmallMolecule>
)

<DirectionalReaction> CLOSED {
    (  $<DirectionalReaction_tes> (  &<AbstractReaction_tes> ;
          rdf:type [ <AbstractReaction> ] ? ;
          <substrates> @<ReactionSide> ? ;
          <products> @<ReactionSide> ? ;
          rdfs:subClassOf @<DirectionalReaction> ?
       ) ;
       rdf:type [ <DirectionalReaction> ]
    )
}

<GenericCompound>  (
    CLOSED {
       (  $<GenericCompound_tes> (  &<Compound_tes> ;
             rdf:type [ <Compound> ] ? ;
             <reactivePart> @linkml:String *
          ) ;
          rdf:type [ <GenericCompound> ]
       )
    } OR @<GenericPolynucleotide> OR @<GenericPolypeptide>
)

<GenericPolynucleotide> CLOSED {
    (  $<GenericPolynucleotide_tes> (  &<GenericCompound_tes> ;
          rdf:type [ <GenericCompound> ] ?
       ) ;
       rdf:type [ <GenericPolynucleotide> ]
    )
}

<GenericPolypeptide> CLOSED {
    (  $<GenericPolypeptide_tes> (  &<GenericCompound_tes> ;
          rdf:type [ <GenericCompound> ] ?
       ) ;
       rdf:type [ <GenericPolypeptide> ]
    )
}

<Polymer> CLOSED {
    (  $<Polymer_tes> (  &<Compound_tes> ;
          rdf:type [ <Compound> ] ? ;
          <charge> @linkml:Integer ? ;
          <underlyingChebi> @<CHEBIIdentifier> ? ;
          <polymerizationIndex> @<PolymerizationIndexEnum> ?
       ) ;
       rdf:type [ <Polymer> ]
    )
}

<Reaction> CLOSED {
    (  $<Reaction_tes> (  &<AbstractReaction_tes> ;
          rdf:type [ <AbstractReaction> ] ? ;
          <directionalReaction> @<DirectionalReaction> * ;
          <bidirectionalReaction> @<BidirectionalReaction> ? ;
          <side> @<ReactionSide> * ;
          <ec> @linkml:String * ;
          rdfs:subClassOf @<Reaction> ?
       ) ;
       rdf:type [ <Reaction> ]
    )
}

<ReactionParticipant> CLOSED {
    (  $<ReactionParticipant_tes> (  &<Class_tes> ;
          rdf:type [ rdfs:Class ] ? ;
          <compound> @<Compound> ? ;
          <location> @<LocationEnum> ? ;
          rdfs:subClassOf @<Compound> ?
       ) ;
       rdf:type [ <ReactionParticipant> ]
    )
}

<ReactionSide> CLOSED {
    (  $<ReactionSide_tes> (  <contains> @<ReactionParticipant> * ;
          <transformableTo> @<ReactionSide> ? ;
          rdf:type @linkml:Uriorcurie ? ;
          <curatedOrder> @linkml:Integer ? ;
          <contains1> @linkml:String * ;
          <contains2> @linkml:String * ;
          <contains4> @linkml:String * ;
          <contains3> @linkml:String * ;
          <contains6> @linkml:String * ;
          <contains5> @linkml:String * ;
          <contains8> @linkml:String * ;
          <containsN> @linkml:String * ;
          <contains7> @linkml:String * ;
          <contains16> @linkml:String * ;
          <contains9> @linkml:String * ;
          <contains20> @linkml:String * ;
          <contains11> @linkml:String * ;
          <contains12> @linkml:String * ;
          <containsNminus1> @linkml:String * ;
          <contains2n> @linkml:String * ;
          <contains10> @linkml:String * ;
          <contains22> @linkml:String * ;
          <contains24> @linkml:String * ;
          <containsNplus1> @linkml:String * ;
          <contains27> @linkml:String * ;
          <contains18> @linkml:String * ;
          <contains28> @linkml:String * ;
          <contains32> @linkml:String * ;
          <contains17> @linkml:String * ;
          <contains13> @linkml:String * ;
          <contains14> @linkml:String * ;
          <contains40> @linkml:String * ;
          <contains26> @linkml:String * ;
          <contains21> @linkml:String * ;
          <contains19> @linkml:String *
       ) ;
       rdf:type [ <ReactionSide> ]
    )
}

<ReactivePart> CLOSED {
    (  $<ReactivePart_tes> (  &<Class_tes> ;
          rdf:type [ rdfs:Class ] ? ;
          <name> @linkml:String ? ;
          <charge> @linkml:Integer ? ;
          <chebi> @linkml:String ? ;
          <formula> @linkml:String ? ;
          <htmlName> @linkml:String ? ;
          <position> @linkml:Integer ? ;
          rdfs:subClassOf @<Compound> ?
       ) ;
       rdf:type [ <ReactivePart> ]
    )
}

<SmallMolecule> CLOSED {
    (  $<SmallMolecule_tes> (  &<Compound_tes> ;
          rdf:type [ <Compound> ] ? ;
          <chebi> @linkml:String ? ;
          <charge> @linkml:Integer ? ;
          rdfs:subClassOf @<SmallMolecule> ?
       ) ;
       rdf:type [ <SmallMolecule> ]
    )
}


